#!/bin/bash

# 精简增强版交互式系统快照备份工具安装脚本
# 版本: v2.1-optimized - 修改定时器配置和TG通知逻辑

# ====================================================================
# ## USER CONFIGURATION ##
# 在运行脚本前，您可以直接在此处修改默认值，以实现快速部署
# ====================================================================

# --- Telegram 配置 ---
BOT_TOKEN=""
CHAT_ID=""

# --- 远程 SSH 服务器配置 ---
TARGET_IP=""
TARGET_USER="root"
SSH_PORT=""
TARGET_BASE_DIR="/root/Remote_backup"
REMOTE_DIR_NAME=""

# --- 本地配置 ---
BACKUP_DIR="/backups"

# --- 备份保留策略 ---
LOCAL_SNAPSHOT_KEEP="2"
REMOTE_SNAPSHOT_DAYS="15"

# --- 自动化配置 ---
BACKUP_INTERVAL_DAYS="5"
RUN_NOW="Y"

# --- 新增配置 ---
DISK_SPACE_THRESHOLD="85"  # 磁盘使用率阈值(%)
MAX_RETRY_ATTEMPTS="3"     # 网络操作最大重试次数
LOAD_THRESHOLD_MULTIPLIER="1.0"  # 负载阈值倍数(基于CPU核心数)，1.0表示等于核心数
MEMORY_THRESHOLD="80"      # 内存使用率阈值(%)，超过此值会在TG中提醒

# ====================================================================
# 脚本核心代码
# ====================================================================

# 颜色设置
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# 标准化路径定义
CONFIG_DIR="/etc/system_snapshot"
CONFIG_FILE="$CONFIG_DIR/config.conf"
SCRIPT_DIR="/usr/local/sbin"
SCRIPT_FILE="$SCRIPT_DIR/system_snapshot.sh"
LOG_DIR="/var/log/system_snapshot"
INSTALL_LOG_FILE="$LOG_DIR/install.log"
SNAPSHOT_LOG_FILE="$LOG_DIR/snapshot.log"
DEBUG_LOG_FILE="$LOG_DIR/debug.log"

# 日志函数
log() {
    mkdir -p "$LOG_DIR"
    echo -e "$1" | tee -a "$INSTALL_LOG_FILE"
}

# 错误处理函数
error_exit() {
    log "${RED}错误: $1${NC}"
    exit 1
}

# 显示带边框的标题
show_title() {
    local title="$1"
    local width=60
    local padding=$(( (width - ${#title}) / 2 ))
    echo -e "\n${BLUE}$(printf '=%.0s' {1..60})${NC}"
    echo -e "${BLUE}$(printf ' %.0s' {1..$padding})${CYAN}$title${BLUE}$(printf ' %.0s' {1..$padding})${NC}"
    echo -e "${BLUE}$(printf '=%.0s' {1..60})${NC}\n"
}

# 验证必要条件
check_requirements() {
    if [ "$EUID" -ne 0 ]; then
        error_exit "请使用root权限运行此脚本"
    fi
    for cmd in curl ssh rsync tar git hostname jq bc; do
        if ! command -v $cmd &> /dev/null; then
            log "${YELLOW}安装 $cmd...${NC}"
            apt-get update && apt-get install -y $cmd || error_exit "无法安装 $cmd"
        fi
    done
    # 尝试安装pigz用于多线程压缩
    if ! command -v pigz &> /dev/null; then
        apt-get install -y pigz 2>/dev/null || log "${YELLOW}pigz 安装失败，将使用 gzip${NC}"
    fi
}

# 简化的配置验证
validate_config() {
    for param in BOT_TOKEN CHAT_ID TARGET_IP; do
        if [ -z "${!param}" ]; then
            error_exit "配置参数 $param 不能为空"
        fi
    done
    if ! [[ "$SSH_PORT" =~ ^[0-9]+$ ]] || [ "$SSH_PORT" -lt 1 ] || [ "$SSH_PORT" -gt 65535 ]; then
        error_exit "SSH端口无效: $SSH_PORT"
    fi
}

# 配置收集函数（保持原有逻辑，移除冗余输出）
collect_config() {
    show_title "系统快照备份配置向导"
    log "${CYAN}ℹ️ 将加载脚本顶部的预设值作为默认项，可直接回车使用。${NC}\n"

    # Telegram配置
    log "${YELLOW}📱 Telegram 通知配置:${NC}"
    read -p "请输入 Telegram Bot Token [当前: ${BOT_TOKEN:0:8}...]: " INPUT
    BOT_TOKEN=${INPUT:-$BOT_TOKEN}
    while [ -z "$BOT_TOKEN" ]; do
        log "${RED}Bot Token 不能为空${NC}"
        read -p "请输入 Telegram Bot Token: " BOT_TOKEN
    done

    read -p "请输入 Telegram Chat ID [当前: $CHAT_ID]: " INPUT
    CHAT_ID=${INPUT:-$CHAT_ID}
    while [ -z "$CHAT_ID" ]; do
        log "${RED}Chat ID 不能为空${NC}"
        read -p "请输入 Telegram Chat ID: " CHAT_ID
    done
    echo

    # 远程服务器配置
    log "${YELLOW}🌐 远程服务器配置:${NC}"
    read -p "请输入远程服务器IP地址 [当前: $TARGET_IP]: " INPUT
    TARGET_IP=${INPUT:-$TARGET_IP}
    while [ -z "$TARGET_IP" ]; do
        log "${RED}IP地址不能为空${NC}"
        read -p "请输入远程服务器IP地址: " TARGET_IP
    done

    read -p "请输入远程服务器用户名 [默认: $TARGET_USER]: " INPUT
    TARGET_USER=${INPUT:-$TARGET_USER}

    read -p "请输入SSH端口 [默认: $SSH_PORT]: " INPUT
    SSH_PORT=${INPUT:-$SSH_PORT}
    echo

    # 远程目录配置
    log "${YELLOW}📁 远程存储配置:${NC}"
    read -p "请输入远程基础备份目录 [默认: $TARGET_BASE_DIR]: " INPUT
    TARGET_BASE_DIR=${INPUT:-$TARGET_BASE_DIR}

    HOSTNAME=$(hostname)
    if [ -z "$REMOTE_DIR_NAME" ]; then
        REMOTE_DIR_NAME="$HOSTNAME"
        log "\n${CYAN}ℹ️ 本机将在远程创建目录: $TARGET_BASE_DIR/$REMOTE_DIR_NAME${NC}"
        read -p "是否使用此默认目录名 '$REMOTE_DIR_NAME'? [Y/n]: " USE_DEFAULT_HOSTNAME
        if [[ "$USE_DEFAULT_HOSTNAME" =~ ^[Nn]$ ]]; then
            read -p "请输入自定义目录名: " CUSTOM_HOSTNAME
            while [ -z "$CUSTOM_HOSTNAME" ]; do
                log "${RED}目录名不能为空${NC}"
                read -p "请输入自定义目录名: " CUSTOM_HOSTNAME
            done
            REMOTE_DIR_NAME="$CUSTOM_HOSTNAME"
        fi
    else
        log "\n${CYAN}ℹ️ 使用预设的远程目录名: $REMOTE_DIR_NAME${NC}"
    fi

    FULL_REMOTE_PATH="$TARGET_BASE_DIR/$REMOTE_DIR_NAME"
    log "${GREEN}✓ 远程完整路径: $FULL_REMOTE_PATH${NC}"
    echo

    # 本地配置
    log "${YELLOW}💾 本地配置:${NC}"
    read -p "请输入本地备份目录 [默认: $BACKUP_DIR]: " INPUT
    BACKUP_DIR=${INPUT:-$BACKUP_DIR}

    # 保留策略配置
    log "\n${YELLOW}🗄️ 备份保留策略:${NC}"
    read -p "请输入本地保留快照数量 [默认: $LOCAL_SNAPSHOT_KEEP]: " INPUT
    LOCAL_SNAPSHOT_KEEP=${INPUT:-$LOCAL_SNAPSHOT_KEEP}

    read -p "请输入远程快照保留天数 [默认: $REMOTE_SNAPSHOT_DAYS]: " INPUT
    REMOTE_SNAPSHOT_DAYS=${INPUT:-$REMOTE_SNAPSHOT_DAYS}
    echo

    # 自动执行间隔配置
    log "${YELLOW}⏰ 自动执行配置:${NC}"
    read -p "请输入备份间隔天数 (1-30) [默认: $BACKUP_INTERVAL_DAYS]: " INPUT
    BACKUP_INTERVAL_DAYS=${INPUT:-$BACKUP_INTERVAL_DAYS}
    while [[ ! "$BACKUP_INTERVAL_DAYS" =~ ^[1-9]$|^[1-2][0-9]$|^30$ ]]; do
        log "${RED}请输入1-30之间的数字${NC}"
        read -p "请输入备份间隔天数 [默认: 5]: " INPUT
        BACKUP_INTERVAL_DAYS=${INPUT:-5}
    done

    read -p "是否需要立即执行一次快照测试？[Y/n]: " INPUT
    RUN_NOW=${INPUT:-$RUN_NOW}
    echo

    # 验证配置
    validate_config

    # 配置预览
    show_title "配置预览"
    log "${CYAN}远程服务器:${NC} $TARGET_USER@$TARGET_IP:$SSH_PORT"
    log "${CYAN}远程路径:${NC} $FULL_REMOTE_PATH"
    log "${CYAN}本地路径:${NC} $BACKUP_DIR"
    log "${CYAN}保留策略:${NC} 本地${LOCAL_SNAPSHOT_KEEP}个，远程${REMOTE_SNAPSHOT_DAYS}天"
    log "${CYAN}自动执行:${NC} 每${BACKUP_INTERVAL_DAYS}天一次"
    echo

    read -p "确认以上配置并继续？[Y/n]: " CONFIRM_CONFIG
    if [[ "$CONFIRM_CONFIG" =~ ^[Nn]$ ]]; then
        log "\n${YELLOW}配置已取消，请重新运行脚本进行配置${NC}"
        exit 0
    fi
}

# SSH密钥配置
setup_ssh_key() {
    show_title "SSH密钥配置 (Ed25519)"
    
    mkdir -p /root/.ssh
    chmod 700 /root/.ssh
    
    if [ ! -f "/root/.ssh/id_ed25519" ]; then
        log "${YELLOW}生成新的 Ed25519 SSH 密钥...${NC}"
        ssh-keygen -t ed25519 -N "" -f /root/.ssh/id_ed25519 -q
    fi
    
    log "${YELLOW}请将以下公钥添加到远程服务器的 ~/.ssh/authorized_keys 文件中:${NC}"
    echo -e "\n${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    cat /root/.ssh/id_ed25519.pub
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    read -p "已将公钥添加到远程服务器？继续测试连接... [Y/n]: " SSH_OK
    if [[ ! "$SSH_OK" =~ ^[Nn]$ ]]; then
        log "${YELLOW}测试SSH连接...${NC}"
        if ssh -p "$SSH_PORT" -o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/root/.ssh/known_hosts "$TARGET_USER@$TARGET_IP" "echo 'SSH连接测试成功'" 2>/dev/null; then
            log "${GREEN}✓ SSH连接测试成功！${NC}\n"
            
            log "${YELLOW}创建远程目录结构...${NC}"
            ssh -p "$SSH_PORT" "$TARGET_USER@$TARGET_IP" "mkdir -p $FULL_REMOTE_PATH/system_snapshots $FULL_REMOTE_PATH/configs $FULL_REMOTE_PATH/logs" 2>/dev/null
            
            if [ $? -eq 0 ]; then
                log "${GREEN}✓ 远程目录创建成功: $FULL_REMOTE_PATH${NC}\n"
            else
                log "${YELLOW}⚠ 远程目录创建可能失败，请手动检查${NC}\n"
            fi
        else
            log "${RED}✗ SSH连接失败。请检查配置后重试。${NC}"
            read -p "继续安装（将跳过远程备份）？[y/N]: " CONTINUE
            if [[ ! "$CONTINUE" =~ ^[Yy]$ ]]; then
                exit 1
            fi
        fi
    fi
}

# 测试Telegram通知
test_telegram() {
    show_title "Telegram通知测试"
    response=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
        -d chat_id="$CHAT_ID" \
        -d text="🚀 *系统快照备份工具安装测试*

- 您正在使用系统快照备份工具
- 时间: \`$(date '+%F %T')\`
- 主机: \`$(hostname)\`" \
        -d parse_mode="Markdown")
    if [[ $response == *"\"ok\":true"* ]]; then
        log "${GREEN}✓ Telegram通知测试成功！${NC}\n"
    else
        log "${RED}✗ Telegram通知发送失败，请检查配置${NC}\n"
    fi
}

# 创建配置文件和主脚本
create_script() {
    show_title "创建备份脚本"
    
    mkdir -p "$BACKUP_DIR" "$CONFIG_DIR" "$SCRIPT_DIR" "$LOG_DIR"
    
    log "${YELLOW}创建配置文件...${NC}"
    cat > "$CONFIG_FILE" << EOF
#!/bin/bash
# 系统快照备份配置文件 (由安装脚本自动生成于: $(date '+%F %T'))

# Telegram配置
BOT_TOKEN="$BOT_TOKEN"
CHAT_ID="$CHAT_ID"

# 远程服务器配置
TARGET_IP="$TARGET_IP"
TARGET_USER="$TARGET_USER"
SSH_PORT="$SSH_PORT"
TARGET_BASE_DIR="$TARGET_BASE_DIR"
REMOTE_DIR_NAME="$REMOTE_DIR_NAME"

# 本地配置
BACKUP_DIR="$BACKUP_DIR"
HOSTNAME=\$(hostname)

# 保留策略
LOCAL_SNAPSHOT_KEEP=$LOCAL_SNAPSHOT_KEEP
REMOTE_SNAPSHOT_DAYS=$REMOTE_SNAPSHOT_DAYS

# 执行配置
BACKUP_INTERVAL_DAYS=$BACKUP_INTERVAL_DAYS

# 高级配置
DISK_SPACE_THRESHOLD="$DISK_SPACE_THRESHOLD"
MAX_RETRY_ATTEMPTS="$MAX_RETRY_ATTEMPTS"
LOAD_THRESHOLD_MULTIPLIER="$LOAD_THRESHOLD_MULTIPLIER"
MEMORY_THRESHOLD="$MEMORY_THRESHOLD"

# 日志文件
LOG_FILE="$SNAPSHOT_LOG_FILE"
DEBUG_LOG="$DEBUG_LOG_FILE"
EOF

    log "${YELLOW}创建主备份脚本...${NC}"
    cat > "$SCRIPT_FILE" << 'EOF'
#!/bin/bash

# 加载配置
source "/etc/system_snapshot/config.conf" || { echo "配置文件未找到"; exit 1; }

# 变量设置
TIMESTAMP=$(date +"%Y%m%d%H%M%S")
SNAPSHOT_FILE="$BACKUP_DIR/system_snapshot_${TIMESTAMP}.tar.gz"
FULL_REMOTE_PATH="$TARGET_BASE_DIR/$REMOTE_DIR_NAME"
LOCK_FILE="/tmp/system_snapshot.lock"

# 进程锁 (使用flock避免竞争条件)
exec 200>"$LOCK_FILE"
if ! flock -n 200; then
    echo "脚本已在运行"
    exit 1
fi
echo $$ >&200
trap 'flock -u 200' EXIT

# 日志函数
log_info() { echo "$(date '+%F %T') [INFO] $1" | tee -a "$LOG_FILE"; }
log_error() { echo "$(date '+%F %T') [ERROR] $1" | tee -a "$LOG_FILE"; }

# 重试机制 (修复参数传递问题)
retry_command() {
    local max_attempts="$MAX_RETRY_ATTEMPTS"
    local attempt=1
    while [ $attempt -le $max_attempts ]; do
        if eval "$*"; then return 0; fi
        log_info "命令失败，第 $attempt 次重试..."
        sleep $((attempt * 3))
        ((attempt++))
    done
    return 1
}

# 字节格式化 (纯bash实现，支持科学计数法)
format_bytes() {
    local bytes="$1"
    
    # 处理空值或非数字
    if [ -z "$bytes" ]; then
        echo "0B"; return
    fi
    
    # 处理科学计数法 (如: 6.37266e+09)
    if [[ "$bytes" =~ [eE] ]]; then
        # 使用bc或awk将科学计数法转换为整数
        bytes=$(echo "$bytes" | awk '{printf "%.0f", $1}' 2>/dev/null || echo "0")
    fi
    
    # 确保是整数
    if ! [[ "$bytes" =~ ^[0-9]+$ ]] || [ "$bytes" -eq 0 ]; then
        echo "0B"; return
    fi
    
    if [ "$bytes" -ge 1073741824 ]; then
        local gb=$((bytes / 1073741824))
        local remainder=$((bytes % 1073741824))
        local decimal=$((remainder * 10 / 1073741824))
        echo "${gb}.${decimal}GB"
    elif [ "$bytes" -ge 1048576 ]; then
        local mb=$((bytes / 1048576))
        local remainder=$((bytes % 1048576))
        local decimal=$((remainder * 10 / 1048576))
        echo "${mb}.${decimal}MB"
    elif [ "$bytes" -ge 1024 ]; then
        local kb=$((bytes / 1024))
        local remainder=$((bytes % 1024))
        local decimal=$((remainder * 10 / 1024))
        echo "${kb}.${decimal}KB"
    else
        echo "${bytes}B"
    fi
}

# 磁盘空间检查 (改进解析健壮性)
check_disk_space() {
    local disk_info=$(df "$BACKUP_DIR" 2>/dev/null | tail -n 1)
    if [ -z "$disk_info" ]; then
        log_error "无法获取磁盘信息"
        return 1
    fi
    
    local disk_usage=$(echo "$disk_info" | awk '{print $5}' | sed 's/%//')
    if ! [[ "$disk_usage" =~ ^[0-9]+$ ]]; then
        log_error "无法解析磁盘使用率"
        return 1
    fi
    
    if [ "$disk_usage" -gt "$DISK_SPACE_THRESHOLD" ]; then
        log_error "磁盘空间不足: ${disk_usage}% > ${DISK_SPACE_THRESHOLD}%"
        send_telegram_notification "备份失败" "磁盘使用率过高 (${disk_usage}%)" "❌"
        return 1
    fi
}

# 获取系统状态信息
get_system_status() {
    # 获取负载 (1分钟平均负载)
    local system_load=$(uptime | awk -F'load average:' '{print $2}' | sed 's/^[ \t]*//' | cut -d',' -f1)
    
    # 获取内存使用率
    local memory_usage=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}' 2>/dev/null || echo "0")
    
    # 获取CPU核心数并计算动态负载阈值
    local cpu_cores=$(nproc 2>/dev/null || echo "1")
    local load_threshold=$(echo "$cpu_cores * $LOAD_THRESHOLD_MULTIPLIER" | bc -l 2>/dev/null || echo "$cpu_cores")
    
    echo "$system_load $memory_usage $load_threshold"
}

# 检查是否需要显示系统状态
should_show_system_status() {
    local load="$1"
    local memory="$2"
    local load_threshold="$3"
    
    # 使用bc进行浮点数比较
    local load_high=$(echo "$load > $load_threshold" | bc -l 2>/dev/null || echo "0")
    local memory_high=0
    
    if [[ "$memory" =~ ^[0-9]+$ ]] && [ "$memory" -gt "$MEMORY_THRESHOLD" ]; then
        memory_high=1
    fi
    
    if [ "$load_high" = "1" ] || [ "$memory_high" = "1" ]; then
        return 0  # 需要显示
    else
        return 1  # 不需要显示
    fi
}

# Telegram通知 (优化版，根据系统状态决定是否显示负载和内存)
send_telegram_notification() {
    local title="$1"
    local message="$2"
    local emoji="$3"
    local formatted_message=$(echo -e "$message" | sed 's/^/- /')
    local current_time=$(date '+%F %T')
    local server_info="$REMOTE_DIR_NAME"
    
    # 获取系统状态
    read -r system_load memory_usage load_threshold <<< "$(get_system_status)"
    
    local system_info=""
    if should_show_system_status "$system_load" "$memory_usage" "$load_threshold"; then
        # 只有在负载或内存过高时才显示系统信息
        local cpu_cores=$(nproc 2>/dev/null || echo "1")
        system_info="\n- 负载: \`${system_load}\` (${cpu_cores}核) $(echo "$system_load > $load_threshold" | bc -l 2>/dev/null | grep -q 1 && echo "⚠️" || echo "")"
        system_info="${system_info}\n- 内存: \`${memory_usage}%\` $([ "$memory_usage" -gt "$MEMORY_THRESHOLD" ] && echo "⚠️" || echo "")"
    fi
    
    local payload="{\"chat_id\":\"$CHAT_ID\",\"text\":\"${emoji} *${title}* | \`$server_info\`\n\n${formatted_message}${system_info}\n- 时间: \`${current_time}\`\",\"parse_mode\":\"Markdown\"}"
    
    retry_command "curl -s -X POST 'https://api.telegram.org/bot$BOT_TOKEN/sendMessage' -H 'Content-Type: application/json' -d '$payload' >/dev/null"
}

# systemd定时器设置 (修复时间显示问题)
setup_systemd_timer() {
    local service_file="/etc/systemd/system/system-snapshot.service"
    local timer_file="/etc/systemd/system/system-snapshot.timer"
    
    if [ -f "$timer_file" ]; then
        systemctl stop system-snapshot.timer 2>/dev/null || true
    fi

    cat > "$service_file" << EOFSERVICE
[Unit]
Description=System Snapshot Backup Service
After=network.target
[Service]
Type=oneshot
ExecStart=$(realpath "$0")
Environment="SYSTEMD_TIMER=1"
WorkingDirectory=/root
[Install]
WantedBy=multi-user.target
EOFSERVICE
    
    cat > "$timer_file" << EOFTIMER
[Unit]
Description=Run System Snapshot Every $BACKUP_INTERVAL_DAYS Days
[Timer]
OnActiveSec=1h
OnUnitActiveSec=${BACKUP_INTERVAL_DAYS}d
RandomizedDelaySec=2h
Persistent=true
[Install]
WantedBy=timers.target
EOFTIMER
    
    systemctl daemon-reload
    systemctl enable system-snapshot.timer
    systemctl start system-snapshot.timer
    
    # 简单直接的时间计算（避免systemd解析问题）
    local current_time=$(date +%s)
    local next_run_time=$((current_time + 3600))  # 当前时间 + 1小时
    local next_run_cst=$(date -d "@$next_run_time" '+%Y年%m月%d日 %H:%M (CST)')
    
    log_info "定时器已设置: 1小时后首次运行，之后每${BACKUP_INTERVAL_DAYS}天执行一次"
    log_info "计算得出的下次运行时间: $next_run_cst"
    
    send_telegram_notification "定时任务更新" "频率: 1小时后首次运行，之后每${BACKUP_INTERVAL_DAYS}天一次\n下次运行: ${next_run_cst}" "⏰"
}

# 创建快照 (增加耗时统计)
create_snapshot() {
    local start_time=$(date +%s)
    log_info "开始创建系统快照..."
    send_telegram_notification "开始创建快照" "任务已启动" "🔄"
    
    check_disk_space || return 1
    
    # 使用pigz如果可用
    local compress_cmd="gzip"
    if command -v pigz >/dev/null; then
        compress_cmd="pigz"
        log_info "使用 pigz 多线程压缩"
    fi
    
    cd / && tar -cf - \
        --exclude="dev/*" --exclude="proc/*" --exclude="sys/*" --exclude="tmp/*" \
        --exclude="run/*" --exclude="mnt/*" --exclude="media/*" --exclude="lost+found" \
        --exclude="var/cache/*" --exclude="var/tmp/*" --exclude="var/log/*" \
        --exclude="var/lib/apt/lists/*" --exclude="var/lib/docker/*" \
        --exclude="$BACKUP_DIR/*" --exclude="*.log" --exclude="*.tmp" \
        --exclude="swap*" --exclude="core" --exclude=".cache/*" \
        --warning=no-file-changed \
        etc usr var root home opt 2>/tmp/snapshot_error.log | $compress_cmd > "$SNAPSHOT_FILE"
    
    if [ ! -f "$SNAPSHOT_FILE" ] || [ ! -s "$SNAPSHOT_FILE" ]; then
        local error_msg=$(cat /tmp/snapshot_error.log 2>/dev/null || echo "未知错误")
        log_error "快照创建失败: $error_msg"
        send_telegram_notification "系统快照失败" "错误: \`$error_msg\`" "❌"
        return 1
    fi
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    local snapshot_size=$(du -h "$SNAPSHOT_FILE" | cut -f1)
    
    # 正确的文件名处理 (纯bash字符串操作)
    local snapshot_name_short="${SNAPSHOT_FILE##*/}"
    snapshot_name_short="${snapshot_name_short%%.tar.gz}"
    snapshot_name_short="${snapshot_name_short#system_snapshot_}"
    snapshot_name_short="${snapshot_name_short:0:8}-${snapshot_name_short:8:4}"
    
    log_info "快照创建成功: $SNAPSHOT_FILE ($snapshot_size, 耗时: ${duration}s)"
    send_telegram_notification "系统快照创建成功" "快照文件: \`$snapshot_name_short\`\n文件大小: \`$snapshot_size\`\n创建耗时: \`${duration}秒\`" "📸"
}

# 清理本地旧快照
cleanup_local() {
    log_info "清理本地旧快照..."
    find "$BACKUP_DIR" -maxdepth 1 -type f -name "system_snapshot_*.tar.gz" | sort -r | tail -n +$((LOCAL_SNAPSHOT_KEEP+1)) | xargs -r rm -f
}

# 上传到远程 (增加耗时和速度统计)
upload_snapshot() {
    log_info "开始上传快照到远程服务器..."
    send_telegram_notification "开始远程上传" "任务已启动" "⬆️"
    
    if ! retry_command "ssh -p '$SSH_PORT' -o ConnectTimeout=10 -o BatchMode=yes '$TARGET_USER@$TARGET_IP' 'echo 连接测试' >/dev/null"; then
        log_error "无法连接到远程服务器"
        send_telegram_notification "远程上传失败" "原因: 无法连接到远程服务器" "⚠️"
        return 1
    fi
    
    local upload_start_time=$(date +%s)
    local snapshot_size_bytes=$(du -b "$SNAPSHOT_FILE" | cut -f1)
    
    if retry_command "rsync -avz --timeout=300 -e 'ssh -p $SSH_PORT' '$SNAPSHOT_FILE' '$TARGET_USER@$TARGET_IP:$FULL_REMOTE_PATH/system_snapshots/'"; then
        local upload_end_time=$(date +%s)
        local upload_duration=$((upload_end_time - upload_start_time))
        
        # 避免除零错误
        local upload_speed="N/A"
        if [ "$upload_duration" -gt 0 ]; then
            local upload_speed_bps=$((snapshot_size_bytes / upload_duration))
            upload_speed="$(format_bytes $upload_speed_bps)/s"
        fi
        
        # 正确的文件名处理
        local snapshot_name_short="${SNAPSHOT_FILE##*/}"
        snapshot_name_short="${snapshot_name_short%%.tar.gz}"
        snapshot_name_short="${snapshot_name_short#system_snapshot_}"
        snapshot_name_short="${snapshot_name_short:0:8}-${snapshot_name_short:8:4}"
        
        local display_remote_path=${FULL_REMOTE_PATH/#\/home\/$TARGET_USER/\~}
        
        log_info "快照上传成功"
        send_telegram_notification "远程上传成功" "已成功上传快照: \`$snapshot_name_short\`\n远程路径: \`${display_remote_path}\`\n上传耗时: \`${upload_duration}秒\`\n传输速度: \`${upload_speed}\`" "✅"
        
        # 清理远程旧快照
        ssh -p "$SSH_PORT" "$TARGET_USER@$TARGET_IP" "find $FULL_REMOTE_PATH/system_snapshots -type f -name '*.tar.gz' -mtime +$REMOTE_SNAPSHOT_DAYS -delete"
    else
        log_error "快照上传失败"
        send_telegram_notification "远程上传失败" "错误: rsync传输失败" "❌"
    fi
}

# 主执行流程
if [ -z "$SYSTEMD_TIMER" ]; then
    setup_systemd_timer
fi

create_snapshot && cleanup_local && upload_snapshot

log_info "系统快照操作全部完成"

# 统计信息 (统一大小显示格式)
TOTAL_LOCAL_SNAPSHOTS=$(find "$BACKUP_DIR" -maxdepth 1 -type f -name "system_snapshot_*.tar.gz" | wc -l)

# 使用多种方法尝试获取本地文件总大小
if [ "$TOTAL_LOCAL_SNAPSHOTS" -gt 0 ]; then
    # 优先使用 du 命令
    TOTAL_LOCAL_SIZE_BYTES=$(find "$BACKUP_DIR" -maxdepth 1 -type f -name "system_snapshot_*.tar.gz" -exec du -b {} + 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
    
    # 如果 du -b 不支持，尝试使用 wc -c
    if [ "$TOTAL_LOCAL_SIZE_BYTES" = "0" ] || [ -z "$TOTAL_LOCAL_SIZE_BYTES" ]; then
        TOTAL_LOCAL_SIZE_BYTES=$(find "$BACKUP_DIR" -maxdepth 1 -type f -name "system_snapshot_*.tar.gz" -exec wc -c {} + 2>/dev/null | tail -n 1 | awk '{print $1}' || echo '0')
    fi
    
    # 最后的备选方案：使用 stat 命令
    if [ "$TOTAL_LOCAL_SIZE_BYTES" = "0" ] || [ -z "$TOTAL_LOCAL_SIZE_BYTES" ]; then
        TOTAL_LOCAL_SIZE_BYTES=$(find "$BACKUP_DIR" -maxdepth 1 -type f -name "system_snapshot_*.tar.gz" -exec stat -c%s {} + 2>/dev/null | awk '{sum+=$1} END {print sum+0}' || echo '0')
    fi
else
    TOTAL_LOCAL_SIZE_BYTES=0
fi

TOTAL_LOCAL_SIZE=$(format_bytes "$TOTAL_LOCAL_SIZE_BYTES")

# 获取本次快照大小（使用与总大小相同的方法确保一致性）
if [ -f "$SNAPSHOT_FILE" ]; then
    SNAPSHOT_SIZE_BYTES=$(du -b "$SNAPSHOT_FILE" 2>/dev/null | cut -f1 || wc -c < "$SNAPSHOT_FILE" 2>/dev/null || echo "0")
    SNAPSHOT_SIZE=$(format_bytes "$SNAPSHOT_SIZE_BYTES")
else
    SNAPSHOT_SIZE="N/A"
fi

# 获取磁盘使用率
DISK_USAGE=$(df "$BACKUP_DIR" 2>/dev/null | tail -n 1 | awk '{print $5}' | sed 's/%//' || echo "N/A")

REPORT_MESSAGE="本次快照大小: \`${SNAPSHOT_SIZE:-N/A}\`\n本地快照数量: \`${TOTAL_LOCAL_SNAPSHOTS}\`个\n本地总大小: \`${TOTAL_LOCAL_SIZE}\`\n磁盘使用率: \`${DISK_USAGE}%\`"

if ssh -p "$SSH_PORT" -o ConnectTimeout=5 -o BatchMode=yes "$TARGET_USER@$TARGET_IP" "true" >/dev/null 2>&1; then
    # 获取远程快照统计信息 (修复科学计数法问题)
    REMOTE_STATS=$(ssh -p "$SSH_PORT" "$TARGET_USER@$TARGET_IP" "
        if [ -d '$FULL_REMOTE_PATH/system_snapshots' ]; then
            cd '$FULL_REMOTE_PATH/system_snapshots'
            
            # 统计文件数量
            COUNT=\$(find . -name '*.tar.gz' 2>/dev/null | wc -l)
            
            if [ \"\$COUNT\" -gt 0 ]; then
                # 使用 du 命令并强制输出整数格式
                TOTAL_BYTES=\$(du -bc *.tar.gz 2>/dev/null | tail -n 1 | awk '{printf \"%.0f\", \$1}' || echo '0')
                
                # 如果 du 失败，使用 ls 方法
                if [ \"\$TOTAL_BYTES\" = \"0\" ] || [ -z \"\$TOTAL_BYTES\" ]; then
                    TOTAL_BYTES=\$(ls -la *.tar.gz 2>/dev/null | awk 'NF>=5 {sum+=\$5} END {printf \"%.0f\", sum+0}')
                fi
                
                # 最后备选：单个文件累加
                if [ \"\$TOTAL_BYTES\" = \"0\" ] || [ -z \"\$TOTAL_BYTES\" ]; then
                    TOTAL_BYTES=0
                    for file in *.tar.gz; do
                        if [ -f \"\$file\" ]; then
                            size=\$(wc -c < \"\$file\" 2>/dev/null || echo '0')
                            TOTAL_BYTES=\$((TOTAL_BYTES + size))
                        fi
                    done
                fi
            else
                TOTAL_BYTES=0
            fi
            echo \"\$COUNT \$TOTAL_BYTES\"
        else
            echo '0 0'
        fi
    " 2>/dev/null)
    
    read -r REMOTE_COUNT REMOTE_SIZE_BYTES <<< "$REMOTE_STATS"
    
    # 额外处理：如果还是科学计数法，在本地转换
    if [[ "$REMOTE_SIZE_BYTES" =~ [eE] ]]; then
        REMOTE_SIZE_BYTES=$(echo "$REMOTE_SIZE_BYTES" | awk '{printf "%.0f", $1}' 2>/dev/null || echo "0")
    fi
    
    REMOTE_SIZE_FORMATTED=$(format_bytes "${REMOTE_SIZE_BYTES:-0}")
    
    log_info "远程统计结果: 数量=${REMOTE_COUNT}, 大小=${REMOTE_SIZE_BYTES}字节 (${REMOTE_SIZE_FORMATTED})"
    
    REPORT_MESSAGE="${REPORT_MESSAGE}\n远程快照数量: \`${REMOTE_COUNT:-0}\`个\n远程总大小: \`${REMOTE_SIZE_FORMATTED}\`"
else
    REPORT_MESSAGE="${REPORT_MESSAGE}\n远程服务器无法连接"
fi

send_telegram_notification "系统快照操作完成" "$REPORT_MESSAGE" "✅"
EOF

    chmod +x "$SCRIPT_FILE"
    chmod 600 "$CONFIG_FILE"
    log "${GREEN}✓ 脚本创建完成！${NC}\n"
}

# 主流程
main() {
    clear
    show_title "系统快照备份工具安装向导"
    check_requirements
    collect_config
    setup_ssh_key
    test_telegram
    create_script
    if [[ "$RUN_NOW" =~ ^[Yy]$ ]]; then
        log "${YELLOW}正在执行首次测试运行...${NC}"
        bash "$SCRIPT_FILE"
    fi
    show_title "安装完成"
    log "${GREEN}✓ 系统快照备份工具安装成功！${NC}\n"
    log "${CYAN}配置文件位置:${NC} $CONFIG_FILE"
    log "${CYAN}主脚本位置:${NC} $SCRIPT_FILE"
    echo
    log "${YELLOW}请使用以下命令管理定时任务:${NC}"
    log "  - 查看状态: ${CYAN}sudo systemctl status system-snapshot.timer${NC}"
    log "  - 立即运行: ${CYAN}sudo systemctl start system-snapshot.service${NC}"
    log "  - 停止/禁用: ${CYAN}sudo systemctl disable system-snapshot.timer${NC}"
    echo
    log "${BLUE}如需重新配置定时器，编辑配置文件后手动运行一次主脚本即可自动更新。${NC}"
    echo
}

# 运行主程序
main
